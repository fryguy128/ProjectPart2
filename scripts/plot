#! /bin/bash

# the getopt command is external to the shell. essentially what it
# does is parse the command line parameters and rearrange them so
# that all of the options are given before any of the arguments, and
# adds a '--' between the options and arguments. 
# then you can setup a while loop to process options easily and terminate
# it when you run into the '--'

# both long and short options can be given
# short options are passed to -o
# long  options are passed to -l
# a colon (:) after an option means it has a required argument
# two colons (::) after an option means it has a optional argument


NEW_COMMAND_LINE=$(getopt -o hr:m:o: -l help,pre:,modifiers:,post: -n '$(basename $0)' -- "$@")   # this creates a rearranged version of the command line
if [ $? != 0 ] ; then echo "getopt returned an error, Terminating..." >&2 ; exit 1 ; fi
eval set -- "$NEW_COMMAND_LINE"                                                                          # this sets up positional parameters to the new command line

cmd=$(basename $0)

function print_help()
{
cat << EOF
usage: ${cmd} [-m] [-r] [-o]

Plot data read from standard input using gnuplot.

optional arguments:
  -h, --help show this help message and exit
  -m, --modifiers STRING appends STRING to the plot command.
  -r, --pre, -r STRING executed commands in STRING before the plot command.
  -o, --post STRING executed commands in STRING after the plot command.


Example:

This script essentailly builds a gnuplot command string that will plot data
from the standard input. For example:

> $0 -pre "set xrange[0:5]; set yrange[-1.5:1.5]" -pos "set term png; set output 'example.png'; rep" -modifiers "with linespoints title 'data'"

will execute the following command.

gnuplot -persist -e "set xrange[0:5]; set yrange[-1.5:1.5]; $cmd '-' with linespoints title 'data'; set term png; set output 'example.png'; rep"

which will create a plot that is displayed on the screen and a file named example.png.

EOF
}


# now we can just manually loop through the positional parameters
modifiers=""
pre=""
post=""
while true ; do
  case "$1" in
    -h|--help)
      print_help
      exit 0
        ;;
    -m|--modifiers)
        modifiers=$2
        shift 2
        ;;
    -r|--pre)
        pre=$2
        shift 2
        ;;
    -o|--post)
        post=$2
        shift 2
        ;;
    --) shift ; break ;;
     *) echo "Unreconized option got through: '$1'" ; exit 1 ;;
  esac
done


if [[ -n $1 ]]
then
  if [[ $1 == 'hist' || $1 == 'histogram' ]]
  then
    pre="$pre;unset key"
    modifiers="$modifiers with boxes"
  fi
fi


gnuplot -persist -e "$pre; $cmd '-' $modifiers; $post"










