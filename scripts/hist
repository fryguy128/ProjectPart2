#! /usr/bin/python

import fileinput

import argparse

parser = argparse.ArgumentParser(description="Create a histogram for a set of values.")

parser.add_argument("--num-bins", "-n", help="Sets the number of bins that will be used. If not given, a reasonable bin number is automatically calculated.")
parser.add_argument("files", metavar="FILE", nargs="*", help="input files. stdin is used if no files are given.")
args = parser.parse_args()

data = []
nbins = None

for line in fileinput.input(files=args.files if len(args.files) > 0  else ('-',) ):
  try:
    x = float(line)
    data.append(x)
  except:
    pass

n = len(data)
min = min(data)
max = max(data)


def bin(data,min,max):
  # bin width
  dx = (max - min)/n # number of bins *is* number of intervals
  x = [ min + dx*(i+0.5) for i in range(n) ]
  count = [0]*n

  for d in data:
    i = int( (d - min)/dx )
    if i >= n:
      i = n-1
    count[i] += 1

  return x,count



# if the number of bins is not defined,
# try to determine what the best bin count would be
nbins = args.num_bins
if nbins is None:
  nbins = (n / 10)+1

x,count = bin(data,min,max)

for i in range(len(x)):
  print x[i],count[i]
